#!/bin/bash

# =================================================================
# AGREGAR FEATURES DE USUARIOS Y PRODUCTOS
# Autor: Roberto Rivas L√≥pez
# Curso: Automatizaci√≥n de Pruebas
# Objetivo: Probar las tablas que se est√°n creando
# =================================================================

echo "üöÄ AGREGANDO FEATURES DE USUARIOS Y PRODUCTOS..."
echo "üë§ Estudiante: Roberto Rivas L√≥pez"
echo "‚úÖ Las tablas se crean correctamente"
echo "üéØ Agregando features para probarlas"
echo ""

# 1. CREAR FEATURE DE GESTI√ìN DE USUARIOS
echo "üìù Paso 1: Creando feature de gesti√≥n de usuarios..."
cat > src/test/resources/features/gestion_usuarios.feature << 'EOF'
# language: es
Caracter√≠stica: Gesti√≥n de usuarios del sistema
  Como administrador del sistema
  Quiero gestionar los usuarios de la aplicaci√≥n
  Para mantener la seguridad y organizaci√≥n del sistema

  Antecedentes:
    Dado que el sistema est√° disponible
    Y que estoy autenticado como administrador

  @usuarios @creacion
  Escenario: Crear un nuevo usuario exitosamente
    Dado que tengo los datos de un nuevo usuario:
      | nombre           | Roberto P√©rez    |
      | apellido         | Gonz√°lez         |
      | correoElectronico| rperez@test.com  |
      | nombreUsuario    | rperez           |
      | contrasena       | MiClave123!      |
    Cuando env√≠o una solicitud para crear el usuario
    Entonces el usuario deber√≠a crearse exitosamente
    Y deber√≠a recibir c√≥digo de estado 201
    Y el usuario deber√≠a aparecer en la lista de usuarios

  @usuarios @validacion
  Escenario: Error al crear usuario con correo duplicado
    Dado que existe un usuario con correo "existente@test.com"
    Cuando intento crear un usuario con el mismo correo
    Entonces deber√≠a recibir c√≥digo de estado 409
    Y deber√≠a ver mensaje "El correo electr√≥nico ya est√° registrado"

  @usuarios @busqueda
  Escenario: Buscar usuario por nombre de usuario
    Dado que existe un usuario con nombre "rrivasl"
    Cuando busco el usuario por nombre "rrivasl"
    Entonces deber√≠a encontrar el usuario
    Y los datos del usuario deber√≠an ser correctos
EOF

# 2. CREAR FEATURE DE GESTI√ìN DE PRODUCTOS
echo "üìù Paso 2: Creando feature de gesti√≥n de productos..."
cat > src/test/resources/features/gestion_productos.feature << 'EOF'
# language: es
Caracter√≠stica: Gesti√≥n de productos del inventario
  Como usuario autorizado
  Quiero gestionar productos a trav√©s del sistema
  Para mantener actualizado el inventario

  Antecedentes:
    Dado que el sistema est√° disponible
    Y que estoy autenticado con permisos de gesti√≥n

  @productos @creacion
  Escenario: Registrar nuevo producto exitosamente
    Dado que tengo los datos de un producto:
      | nombre          | Laptop Dell Inspiron |
      | descripcion     | Laptop para oficina  |
      | precio          | 599990               |
      | categoria       | ELECTRONICA          |
      | stock           | 10                   |
      | codigoProducto  | DELL-INSP-001        |
    Cuando env√≠o una petici√≥n para crear el producto
    Entonces el producto deber√≠a crearse exitosamente
    Y deber√≠a recibir c√≥digo de estado 201
    Y el producto deber√≠a estar disponible en el inventario

  @productos @validacion
  Escenario: Error al registrar producto con c√≥digo duplicado
    Dado que existe un producto con c√≥digo "PROD-001"
    Cuando intento crear otro producto con el mismo c√≥digo
    Entonces deber√≠a recibir c√≥digo de estado 409
    Y deber√≠a ver mensaje "El c√≥digo del producto ya existe"

  @productos @consulta
  Escenario: Buscar producto por c√≥digo
    Dado que existe un producto con c√≥digo "LAPTOP-001"
    Cuando busco el producto por c√≥digo "LAPTOP-001"
    Entonces deber√≠a encontrar el producto
    Y los datos del producto deber√≠an ser correctos
EOF

# 3. CREAR STEP DEFINITIONS PARA USUARIOS (SIN DUPLICADOS)
echo "üìù Paso 3: Creando step definitions para usuarios..."
cat > src/test/java/com/rrivasl/pruebas/definiciones/DefinicionesUsuarios.java << 'EOF'
package com.rrivasl.pruebas.definiciones;

import com.rrivasl.modelo.Usuario;
import com.rrivasl.servicio.ServicioUsuario;
import io.cucumber.java.es.*;
import io.cucumber.datatable.DataTable;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import static org.junit.jupiter.api.Assertions.*;

import java.util.Map;
import java.util.Optional;

/**
 * Definiciones de pasos para gesti√≥n de usuarios
 * @author Roberto Rivas L√≥pez
 * Principios aplicados: Separaci√≥n de Intereses, Testabilidad
 */
@SpringBootTest
public class DefinicionesUsuarios {
    
    @Autowired
    private ServicioUsuario servicioUsuario;
    
    private Usuario ultimoUsuarioCreado;
    private Exception ultimaExcepcion;
    private String ultimoMensajeError;
    private int ultimoCodigoEstado;
    
    @Dado("que estoy autenticado como administrador")
    public void queEstoyAutenticadoComoAdministrador() {
        System.out.println("üîê Autenticado como administrador - Roberto Rivas L√≥pez");
        // En un escenario real, aqu√≠ se configurar√≠a el contexto de seguridad
        assertTrue(true, "Usuario administrador autenticado");
    }
    
    @Dado("que tengo los datos de un nuevo usuario:")
    public void queTengoLosDatosDeUnNuevoUsuario(DataTable datosUsuario) {
        System.out.println("üìù Preparando datos de nuevo usuario: " + datosUsuario.asMap());
        
        Map<String, String> datos = datosUsuario.asMap();
        ultimoUsuarioCreado = new Usuario();
        ultimoUsuarioCreado.setNombre(datos.get("nombre"));
        ultimoUsuarioCreado.setApellido(datos.get("apellido"));
        ultimoUsuarioCreado.setCorreoElectronico(datos.get("correoElectronico"));
        ultimoUsuarioCreado.setNombreUsuario(datos.get("nombreUsuario"));
        ultimoUsuarioCreado.setContrasena(datos.get("contrasena"));
        
        assertTrue(true, "Datos de usuario preparados");
    }
    
    @Dado("que existe un usuario con correo {string}")
    public void queExisteUnUsuarioConCorreo(String correo) {
        System.out.println("üë§ Verificando usuario existente con correo: " + correo);
        
        // Verificar si ya existe, si no, crearlo
        if (!servicioUsuario.existeCorreoElectronico(correo)) {
            Usuario usuarioExistente = new Usuario();
            usuarioExistente.setNombreUsuario("temp_user_" + System.currentTimeMillis());
            usuarioExistente.setNombre("Usuario");
            usuarioExistente.setApellido("Temporal");
            usuarioExistente.setCorreoElectronico(correo);
            usuarioExistente.setContrasena("Password123!");
            
            servicioUsuario.crearUsuario(usuarioExistente);
        }
        
        assertTrue(servicioUsuario.existeCorreoElectronico(correo), "Usuario con correo existe");
    }
    
    @Dado("que existe un usuario con nombre {string}")
    public void queExisteUnUsuarioConNombre(String nombreUsuario) {
        System.out.println("üë§ Verificando usuario existente con nombre: " + nombreUsuario);
        
        // Verificar si ya existe, si no, crearlo
        if (!servicioUsuario.existeNombreUsuario(nombreUsuario)) {
            Usuario usuarioExistente = new Usuario();
            usuarioExistente.setNombreUsuario(nombreUsuario);
            usuarioExistente.setNombre("Roberto");
            usuarioExistente.setApellido("Rivas L√≥pez");
            usuarioExistente.setCorreoElectronico(nombreUsuario + "@test.com");
            usuarioExistente.setContrasena("Password123!");
            
            servicioUsuario.crearUsuario(usuarioExistente);
        }
        
        assertTrue(servicioUsuario.existeNombreUsuario(nombreUsuario), "Usuario con nombre existe");
    }
    
    @Cuando("env√≠o una solicitud para crear el usuario")
    public void envioUnaSolicitudParaCrearElUsuario() {
        System.out.println("üì§ Enviando solicitud de creaci√≥n de usuario...");
        
        try {
            ultimaExcepcion = null;
            ultimoMensajeError = null;
            ultimoCodigoEstado = 201;
            ultimoUsuarioCreado = servicioUsuario.crearUsuario(ultimoUsuarioCreado);
            System.out.println("‚úÖ Usuario creado con ID: " + ultimoUsuarioCreado.getId());
        } catch (Exception e) {
            ultimaExcepcion = e;
            ultimoMensajeError = e.getMessage();
            ultimoCodigoEstado = 409; // Conflicto
            System.out.println("‚ùå Error al crear usuario: " + e.getMessage());
        }
        
        assertTrue(true, "Solicitud de creaci√≥n procesada");
    }
    
    @Cuando("intento crear un usuario con el mismo correo")
    public void intentoCrearUnUsuarioConElMismoCorreo() {
        System.out.println("‚ö†Ô∏è Intentando crear usuario con correo duplicado");
        
        try {
            Usuario usuarioDuplicado = new Usuario();
            usuarioDuplicado.setNombreUsuario("duplicate_user");
            usuarioDuplicado.setNombre("Usuario");
            usuarioDuplicado.setApellido("Duplicado");
            usuarioDuplicado.setCorreoElectronico("existente@test.com");
            usuarioDuplicado.setContrasena("Password123!");
            
            ultimaExcepcion = null;
            ultimoMensajeError = null;
            ultimoCodigoEstado = 201;
            servicioUsuario.crearUsuario(usuarioDuplicado);
        } catch (Exception e) {
            ultimaExcepcion = e;
            ultimoMensajeError = e.getMessage();
            ultimoCodigoEstado = 409; // Conflicto
            System.out.println("‚ùå Error esperado: " + e.getMessage());
        }
        
        assertTrue(true, "Intento de duplicaci√≥n procesado");
    }
    
    @Cuando("busco el usuario por nombre {string}")
    public void buscoElUsuarioPorNombre(String nombreUsuario) {
        System.out.println("üîç Buscando usuario por nombre: " + nombreUsuario);
        
        Optional<Usuario> usuario = servicioUsuario.buscarPorNombreUsuario(nombreUsuario);
        if (usuario.isPresent()) {
            ultimoUsuarioCreado = usuario.get();
            ultimoCodigoEstado = 200;
        } else {
            ultimoCodigoEstado = 404;
        }
        
        assertTrue(true, "B√∫squeda de usuario procesada");
    }
    
    @Entonces("el usuario deber√≠a crearse exitosamente")
    public void elUsuarioDeberiaCrearseExitosamente() {
        System.out.println("‚úÖ Verificando creaci√≥n exitosa del usuario");
        
        assertNull(ultimaExcepcion, "No deber√≠a haber excepciones");
        assertNotNull(ultimoUsuarioCreado, "Usuario deber√≠a estar creado");
        assertNotNull(ultimoUsuarioCreado.getId(), "Usuario deber√≠a tener ID asignado");
        
        System.out.println("Usuario creado exitosamente con ID: " + ultimoUsuarioCreado.getId());
    }
    
    @Entonces("deber√≠a recibir c√≥digo de estado {int}")
    public void deberiaRecibirCodigoDeEstado(int codigoEsperado) {
        System.out.println("üìä Verificando c√≥digo de estado esperado: " + codigoEsperado);
        assertEquals(codigoEsperado, ultimoCodigoEstado, "C√≥digo de estado deber√≠a coincidir");
    }
    
    @Entonces("el usuario deber√≠a aparecer en la lista de usuarios")
    public void elUsuarioDeberiaAparecerEnLaListaDeUsuarios() {
        System.out.println("üìã Verificando que el usuario aparece en la lista");
        
        assertNotNull(ultimoUsuarioCreado, "Usuario deber√≠a estar creado");
        assertTrue(servicioUsuario.buscarPorId(ultimoUsuarioCreado.getId()).isPresent(),
                  "Usuario deber√≠a estar en la base de datos");
        
        System.out.println("Usuario confirmado en la lista");
    }
    
    @Entonces("deber√≠a ver mensaje {string}")
    public void deberiaVerMensaje(String mensajeEsperado) {
        System.out.println("üí¨ Verificando mensaje: " + mensajeEsperado);
        
        if (ultimaExcepcion != null) {
            assertTrue(ultimoMensajeError.contains(mensajeEsperado) || 
                      ultimoMensajeError.equals(mensajeEsperado),
                      "El mensaje de error deber√≠a contener: " + mensajeEsperado);
        }
        
        System.out.println("Mensaje verificado correctamente");
    }
    
    @Entonces("deber√≠a encontrar el usuario")
    public void deberiaEncontrarElUsuario() {
        System.out.println("‚úÖ Verificando que el usuario fue encontrado");
        
        assertNotNull(ultimoUsuarioCreado, "Usuario deber√≠a haber sido encontrado");
        assertEquals(200, ultimoCodigoEstado, "C√≥digo de estado deber√≠a ser 200");
    }
    
    @Entonces("los datos del usuario deber√≠an ser correctos")
    public void losDatosDelUsuarioDeberianSerCorrectos() {
        System.out.println("üìã Verificando datos del usuario");
        
        assertNotNull(ultimoUsuarioCreado, "Usuario deber√≠a existir");
        assertNotNull(ultimoUsuarioCreado.getNombre(), "Usuario deber√≠a tener nombre");
        assertNotNull(ultimoUsuarioCreado.getCorreoElectronico(), "Usuario deber√≠a tener correo");
        
        System.out.println("Datos del usuario verificados correctamente");
    }
}
EOF

# 4. CREAR STEP DEFINITIONS PARA PRODUCTOS (SIN DUPLICADOS)
echo "üìù Paso 4: Creando step definitions para productos..."
cat > src/test/java/com/rrivasl/pruebas/definiciones/DefinicionesProductos.java << 'EOF'
package com.rrivasl.pruebas.definiciones;

import com.rrivasl.modelo.Producto;
import com.rrivasl.servicio.ServicioProducto;
import io.cucumber.java.es.*;
import io.cucumber.datatable.DataTable;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import static org.junit.jupiter.api.Assertions.*;

import java.math.BigDecimal;
import java.util.Map;

/**
 * Definiciones de pasos para gesti√≥n de productos
 * @author Roberto Rivas L√≥pez
 * Principios aplicados: Separaci√≥n de Intereses, Testabilidad
 */
@SpringBootTest
public class DefinicionesProductos {
    
    @Autowired
    private ServicioProducto servicioProducto;
    
    private Producto ultimoProductoCreado;
    private Exception ultimaExcepcion;
    private String ultimoMensajeError;
    private int ultimoCodigoEstado;
    
    @Dado("que estoy autenticado con permisos de gesti√≥n")
    public void queEstoyAutenticadoConPermisosDeGestion() {
        System.out.println("üîë Autenticado con permisos de gesti√≥n - Roberto Rivas L√≥pez");
        assertTrue(true, "Permisos de gesti√≥n verificados");
    }
    
    @Dado("que tengo los datos de un producto:")
    public void queTengoLosDatosDeUnProducto(DataTable datosProducto) {
        System.out.println("üì¶ Preparando datos de producto: " + datosProducto.asMap());
        
        Map<String, String> datos = datosProducto.asMap();
        ultimoProductoCreado = Producto.builder()
                .nombre(datos.get("nombre"))
                .descripcion(datos.get("descripcion"))
                .precio(new BigDecimal(datos.get("precio")))
                .categoria(datos.get("categoria"))
                .stock(Integer.parseInt(datos.get("stock")))
                .codigoProducto(datos.get("codigoProducto"))
                .build();
        
        assertTrue(true, "Datos de producto preparados");
    }
    
    @Dado("que existe un producto con c√≥digo {string}")
    public void queExisteUnProductoConCodigo(String codigo) {
        System.out.println("üì¶ Verificando producto existente con c√≥digo: " + codigo);
        
        // Verificar si ya existe, si no, crearlo
        Producto productoExistente = servicioProducto.buscarPorCodigo(codigo);
        if (productoExistente == null) {
            productoExistente = Producto.builder()
                    .nombre("Producto Existente")
                    .descripcion("Producto para pruebas")
                    .precio(new BigDecimal("100.00"))
                    .categoria("TEST")
                    .stock(5)
                    .codigoProducto(codigo)
                    .build();
            
            servicioProducto.crearProducto(productoExistente);
        }
        
        assertNotNull(servicioProducto.buscarPorCodigo(codigo), "Producto con c√≥digo debe existir");
    }
    
    @Cuando("env√≠o una petici√≥n para crear el producto")
    public void envioUnaPeticionParaCrearElProducto() {
        System.out.println("üì§ Enviando petici√≥n de creaci√≥n de producto...");
        
        try {
            ultimaExcepcion = null;
            ultimoMensajeError = null;
            ultimoCodigoEstado = 201;
            ultimoProductoCreado = servicioProducto.crearProducto(ultimoProductoCreado);
            System.out.println("‚úÖ Producto creado con ID: " + ultimoProductoCreado.getId());
        } catch (Exception e) {
            ultimaExcepcion = e;
            ultimoMensajeError = e.getMessage();
            ultimoCodigoEstado = 409; // Conflicto
            System.out.println("‚ùå Error al crear producto: " + e.getMessage());
        }
        
        assertTrue(true, "Petici√≥n de creaci√≥n procesada");
    }
    
    @Cuando("intento crear otro producto con el mismo c√≥digo")
    public void intentoCrearOtroProductoConElMismoCodigo() {
        System.out.println("‚ö†Ô∏è Intentando crear producto con c√≥digo duplicado");
        
        try {
            Producto productoDuplicado = Producto.builder()
                    .nombre("Producto Duplicado")
                    .descripcion("Producto con c√≥digo duplicado")
                    .precio(new BigDecimal("200.00"))
                    .categoria("TEST")
                    .stock(3)
                    .codigoProducto("PROD-001")
                    .build();
            
            ultimaExcepcion = null;
            ultimoMensajeError = null;
            ultimoCodigoEstado = 201;
            servicioProducto.crearProducto(productoDuplicado);
        } catch (Exception e) {
            ultimaExcepcion = e;
            ultimoMensajeError = e.getMessage();
            ultimoCodigoEstado = 409; // Conflicto
            System.out.println("‚ùå Error esperado: " + e.getMessage());
        }
        
        assertTrue(true, "Intento de duplicaci√≥n procesado");
    }
    
    @Cuando("busco el producto por c√≥digo {string}")
    public void buscoElProductoPorCodigo(String codigo) {
        System.out.println("üîç Buscando producto por c√≥digo: " + codigo);
        
        Producto producto = servicioProducto.buscarPorCodigo(codigo);
        if (producto != null) {
            ultimoProductoCreado = producto;
            ultimoCodigoEstado = 200;
        } else {
            ultimoCodigoEstado = 404;
        }
        
        assertTrue(true, "B√∫squeda de producto procesada");
    }
    
    @Entonces("el producto deber√≠a crearse exitosamente")
    public void elProductoDeberiaCrearseExitosamente() {
        System.out.println("‚úÖ Verificando creaci√≥n exitosa del producto");
        
        assertNull(ultimaExcepcion, "No deber√≠a haber excepciones");
        assertNotNull(ultimoProductoCreado, "Producto deber√≠a estar creado");
        assertNotNull(ultimoProductoCreado.getId(), "Producto deber√≠a tener ID asignado");
        
        System.out.println("Producto creado exitosamente con ID: " + ultimoProductoCreado.getId());
    }
    
    @Entonces("el producto deber√≠a estar disponible en el inventario")
    public void elProductoDeberiaEstarDisponibleEnElInventario() {
        System.out.println("üìã Verificando que el producto est√° en el inventario");
        
        assertNotNull(ultimoProductoCreado, "Producto deber√≠a estar creado");
        Producto productoEnInventario = servicioProducto.buscarPorCodigo(ultimoProductoCreado.getCodigoProducto());
        assertNotNull(productoEnInventario, "Producto deber√≠a estar en el inventario");
        
        System.out.println("Producto confirmado en el inventario");
    }
    
    @Entonces("deber√≠a encontrar el producto")
    public void deberiaEncontrarElProducto() {
        System.out.println("‚úÖ Verificando que el producto fue encontrado");
        
        assertNotNull(ultimoProductoCreado, "Producto deber√≠a haber sido encontrado");
        assertEquals(200, ultimoCodigoEstado, "C√≥digo de estado deber√≠a ser 200");
    }
    
    @Entonces("los datos del producto deber√≠an ser correctos")
    public void losDatosDelProductoDeberianSerCorrectos() {
        System.out.println("üìã Verificando datos del producto");
        
        assertNotNull(ultimoProductoCreado, "Producto deber√≠a existir");
        assertNotNull(ultimoProductoCreado.getNombre(), "Producto deber√≠a tener nombre");
        assertNotNull(ultimoProductoCreado.getCodigoProducto(), "Producto deber√≠a tener c√≥digo");
        assertTrue(ultimoProductoCreado.getPrecio().compareTo(BigDecimal.ZERO) > 0, "Precio deber√≠a ser mayor a cero");
        
        System.out.println("Datos del producto verificados correctamente");
    }
}
EOF

# 5. MANTENER EL FEATURE B√ÅSICO EXISTENTE
echo "üìù Paso 5: Manteniendo feature b√°sico existente..."
# No tocar prueba_basica.feature - ya est√° funcionando

# 6. MOSTRAR ESTRUCTURA FINAL
echo ""
echo "üìÇ Estructura final completa:"
echo "src/test/resources/features/"
echo "‚îú‚îÄ‚îÄ prueba_basica.feature          # ‚úÖ Funcionando"
echo "‚îú‚îÄ‚îÄ gestion_usuarios.feature       # üÜï Prueba usuarios"
echo "‚îî‚îÄ‚îÄ gestion_productos.feature      # üÜï Prueba productos"
echo ""
echo "src/test/java/com/rrivasl/pruebas/definiciones/"
echo "‚îú‚îÄ‚îÄ DefinicionesPruebaBasica.java  # ‚úÖ Sin duplicados"
echo "‚îú‚îÄ‚îÄ DefinicionesUsuarios.java      # üÜï Para usuarios"
echo "‚îî‚îÄ‚îÄ DefinicionesProductos.java     # üÜï Para productos"

# 7. COMPILAR Y EJECUTAR
echo ""
echo "üî® Paso 6: Compilando proyecto..."
mvn clean compile test-compile

if [ $? -eq 0 ]; then
    echo ""
    echo "üß™ Paso 7: Ejecutando todas las pruebas..."
    mvn test -Dtest=EjecutorPruebasCucumber
    
    if [ $? -eq 0 ]; then
        echo ""
        echo "üéâ =================================================="
        echo "‚úÖ ¬°TODAS LAS PRUEBAS FUNCIONANDO!"
        echo "üéâ =================================================="
        echo ""
        echo "üë§ Estudiante: Roberto Rivas L√≥pez"
        echo "üìö Curso: Automatizaci√≥n de Pruebas"
        echo ""
        echo "‚úÖ Features funcionando:"
        echo "   - Prueba b√°sica del sistema"
        echo "   - Gesti√≥n de usuarios (tabla usuarios probada)"
        echo "   - Gesti√≥n de productos (tabla productos probada)"
        echo ""
        echo "‚úÖ Step definitions sin duplicados:"
        echo "   - DefinicionesPruebaBasica"
        echo "   - DefinicionesUsuarios (√∫nica)"
        echo "   - DefinicionesProductos (√∫nica)"
        echo ""
        echo "üéØ ¬°Ahora las tablas se crean Y se prueban!"
        echo ""
    else
        echo ""
        echo "‚ö†Ô∏è =========================================="
        echo "COMPILACI√ìN OK PERO HAY ERRORES EN PRUEBAS"
        echo "‚ö†Ô∏è =========================================="
        echo ""
        echo "üîç Revisa los errores espec√≠ficos arriba"
    fi
else
    echo ""
    echo "‚ùå =========================================="
    echo "‚ùå PROBLEMAS DE COMPILACI√ìN"
    echo "‚ùå =========================================="
    echo ""
    echo "üîç Revisa los errores de compilaci√≥n mostrados arriba"
fi

echo ""
echo "üèÅ Script completado - Roberto Rivas L√≥pez"